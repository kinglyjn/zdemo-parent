临界区和的概念及共享资源的安全性问题：

    1. 一个程序运行多个线程本身是没有问题的，问题出在多个线程访问共享资源
    2. 多个线程读共享资源本身也没有问题，但多个线程对共享资源进行读写就会发生指令交错，就会出现问题
    3. 一段代码内如果存在对共享资源的多线程操作，那么这块代码就被称为临界区。当你的线程在临界区内执行，由代码的执行序列不同而导致无法预测的结果，就称之为发生了"竞态条件"




解决方案：

    1. 阻塞式的解决方案：

        synchronized（用在代码块、成员方法、静态方法上；锁的类型包括 偏向锁[刻名字]、轻量锁[挂书包]、重量锁[monitor]）
        Lock

    2. 非阻塞式的解决方案：

        原子变量

    注意，虽然java中互斥和同步都可以采用synchronized关键字来完成，但他们还是有区别的
    互斥是保证临界区不发生竞态条件，同一时刻只能有一个线程执行临界区代码
    同步是由线程执行的先后、顺序不同、需要一个线程等待其他线程运行到某个节点产生的




哪些资源是不安全的？

    成员变量和静态变量：
        如果有对成员变量和静态变量的读写操作，则这段代码是临界区，需要考虑线程安全问题
    局部变量：
        局部变量是安全的。但是局部变量引用的对象则未必，如果该对象没有逃离方法的作用范围则它是线程安全的，否则需要考虑线程安全问题




常见线程安全的类：

    String
    Integer
    StringBuffer
    Random
    Vector
    Hashtable
    juc下的类

    这里说他们是线程安全的是指，多个线程调用他们同一个实例的某个方法时，线程是安全的，也可以理解为:
    它们的每个方法是原子的，但是注意它们多个方法的组合并不是原子的。

    不可变类的线程安全性：
    String、Integer类都是不可变类，因为其内部的状态不可以被改变，因此它们的方法都是线程安全的。



